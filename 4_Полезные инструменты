1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: 
(выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

import sys

try:
    file, worked_hour, rate, benefit = sys.argv
except ValueError:
    print("Invalid args")
    exit()


calculation = (int(worked_hour) * int(rate)) + int(benefit)
print(f"Заработная плата равна  {calculation}")


2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new = [el for el in my_list if el > my_list[my_list.index(el)-1]]
print(new)

3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Подсказка: использовать функцию range() и генератор.

numbers = range(20, 241)
new_list = [el for el in numbers if el%20==0 or el%21==0]
print(new_list)

4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new = [el for el in my_list if my_list.count(el)==1]
print(new)

5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().

from functools import reduce

def my_func(el_p, el):
    return el_p * el

print(f'Список четных значений '
      f'{[el for el in range(100, 1001) if el % 2 == 0]}'
      )
print(f'Результат перемножения всех элементов списка '
      f'{reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}'
      )

6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, 
при котором повторение элементов списка будет прекращено.

from itertools import count
from itertools import cycle


def my_count_func(start_number, stop_number):
    for el in count(start_number):
        if el > stop_number:
            break
        else:
            print(el)


def my_cycle_func(my_list, iteration):
    i = 0
    iter = cycle(my_list)
    while i < iteration:
        print(next(iter))
        i += 1


my_count_func(start_number=int(input("Введите стартовое число: ")), stop_number=int(input("Введите последнее число: ")))
my_cycle_func(my_list=[0, 1], iteration=int(input("Введите длину итерации: ")))


7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fibo_gen(number):
	count = 1
	while 1 <= number:
	count *= number
	number += 1
	yield count

i = 1
my_fifteen = []
for el in fibo_gen(1):
	if i > 15:
		break
	else:
		my_fifteen.append(el)
		i += 1
print(my_fifteen)
