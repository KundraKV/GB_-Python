1. Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск). Атрибут реализовать как приватный. 
В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый. Продолжительность первого состояния (красный) составляет 7 секунд, 
второго (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение. Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый).
Проверить работу примера, создав экземпляр и вызвав описанный метод.
Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее сообщение и завершать скрипт.

import time

class TrafficLight:
    __color: list = ['красный', 'желтый', 'зеленый']

    def running(self):
        i = 0
        while i < 9:
            for el in TrafficLight.__color:
                if el == "красный":
                    print(el)
                    time.sleep(7)
                    i += 1
                elif el == "желтый":
                    print(el)
                    time.sleep(2)
                    i += 1
                elif el == "зеленый":
                    print(el)
                    time.sleep(10)
                    i += 1


traffic = TrafficLight()
traffic.running()

2. Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина). Значения данных атрибутов должны передаваться при создании экземпляра класса. 
Атрибуты сделать защищенными. Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна. Использовать формулу: длина*ширина*масса асфальта для
покрытия одного кв метра дороги асфальтом, толщиной в 1 см*число см толщины полотна. Проверить работу метода.
Например: 20м*5000м*25кг*5см = 12500 т


class Road:
    _length: int
    _width: int
    weigth: int = 25
    tickness: int = 5

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def intake(self):
        intake = self._length * self._width * self.weigth * self.tickness / 1000
        print(f"Вам понадобтся {intake} т для дороги")


road = Road(20, 5000)
road.intake()


3. Реализовать базовый класс Worker (работник), в котором определить атрибуты: name, surname, position (должность), income (доход). Последний атрибут должен быть защищенным 
и ссылаться на словарь, содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus}. Создать класс Position (должность) на базе класса Worker. 
В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учетом премии (get_total_income). Проверить работу примера на реальных
данных (создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров).

class Worker:
    name: str
    surname: str
    position: str
    _income: dict

    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {"wage": wage, "bonus": bonus}


class Position(Worker):

    def get_full_name(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return self._income.get('wage') + self._income.get('bonus')


worker = Position('Иван', 'Иванов', 'строитель', 15000, 2500)
print(f"Сотрудник {worker.get_full_name()} на должности {worker.position} имеет доход {worker.get_total_income()}")


4.Реализуйте базовый класс Car. У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево). А также методы: go, stop, turn(direction), 
которые должны сообщать, что машина поехала, остановилась, повернула (куда). Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar. 
Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля. Для классов TownCar и WorkCar переопределите метод show_speed. 
При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.

class Car:
    speed: int
    color: str
    name: str
    is_police: bool = False

    def __init__(self, speed, color, name, is_police):
        self.speed = speed
        self.color = color
        self.name = name
        self.is_police = is_police

    def go(self):
        print(f"{self.name} начал движение")

    def stop(self):
        print(f"{self.name} в остановился")

    def turn_right(self):
        print(f"{self.name} повернул направо")

    def turn_left(self):
        print(f"{self.name} повернул налево")

    def show_speed(self):
        return self.speed
        # print(f"{self.name} едет со скоростью {self.speed}")


class TownCar(Car):

    def show_speed(self):
        super().show_speed()
        if self.speed > 40:
            print(f"Скорость {self.name} превышает разрешенный лимит")
        else:
            print(f"Скорость {self.name} соответсвует норме")


class SportCar(Car):

    def __init__(self, speed, color, name, is_police):
        super().__init__(speed, color, name, is_police)


class WorkCar(Car):

    def show_speed(self):
        super().show_speed()
        if self.speed > 60:
            print(f"Скорость {self.name} превышает разрешенный лимит")
        else:
            print(f"Скорость {self.name} соответсвует норме")


class PoliceCar(Car):

    def __init__(self, speed, color, name, is_police):
        super().__init__(speed, color, name, is_police)


mazda = WorkCar(60, 'серый', 'Mazda', False)
sport = SportCar(0, 'желтый', 'Chevrolet', False)
ford = TownCar(90, 'черный', 'Ford', True)
audi = WorkCar(90, 'белый', 'Audi', False)
police = PoliceCar(180, 'синий', 'Toyota', True)
print(f"{mazda.name} {mazda.color}")
mazda.go()
ford.turn_left()
audi.turn_right()
sport.stop()
mazda.show_speed()
ford.show_speed()
audi.show_speed()

5. Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к атрибутам, выведите результат. Выполните вызов методов и также покажите результат.
6. Реализовать класс Stationery (канцелярская принадлежность). Определить в нем атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение “Запуск отрисовки.”
Создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер). В каждом из классов реализовать переопределение метода draw. Для каждого из классов метод должен
выводить уникальное сообщение. Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.

class Stationery:
    title: str

    def __init__(self, title):
        self.title = title

    def draw(self):
        print("Запуск отрисовки")


class Pen(Stationery):

    def draw(self):
        print(f"Отрисовка ручкой. Запуск отрисовки {self.title}.")


class Pencil(Stationery):

    def draw(self):
        print(f"Отрисовка карандашом. Запуск отрисовки {self.title}.")


class Handle(Stationery):

    def draw(self):
        print(f"Отрисовка маркером. Запуск отрисовки {self.title}.")


sketch = Pen('набросок')
drawing = Pencil('чертеж')
picture = Handle('картина')
sketch.draw()
drawing.draw()
picture.draw()
