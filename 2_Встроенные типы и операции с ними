1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. 
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

numbers = ["two", 4, 8.2, True]

i = 0
while i < len(numbers):
    print(type(numbers[i]))
    i += 1



2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

numbers = list(input("Введите необходимые значения через пробел >>> ").split())
a = 0
b = 1
while b < len(numbers):
    numbers[a], numbers[b] = numbers[b], numbers[a]
    a += 2
    b += 2

print(numbers)


3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

month = int(input('Введите месяц в виде целого числа от 1 до 12: '))

if 12 < month < 1:
    print("Такого месяца не существует!")
    exit()
else:
    seasons = {'Зима': (1, 2, 12),
               'Весна': (3, 4, 5),
               'Лето': (6, 7, 8),
               'Осень': (9, 10, 11)}

    for key in seasons.keys():
        if month in seasons[key]:
            print("Время года -", key)


4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове.

user_answer = input("Введите слова >>> ").split()
print(user_answer)
i = 1


for word in user_answer:
    if len(str(word)) <= 10:
        print(f"{i} {word}")
        i += 1
    else:
        print(f"{i} {word [0:10]}")
        i += 1



5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.

Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

rating = [7, 5, 3, 3, 2]
new_el = int(input("Для выхода введите 555   "
               "Введите новый элемент рейтинга >>> "
               ))


while new_el != 555:

    if new_el >= 0:
        rating.append(new_el)
        rating.sort()
        rating.reverse()
        print("Текущий рейтинг", rating)
        new_el = int(input("Введите новый элемент рейтинга >>> "))

    else:
        print("Введите натуральное число")
        new_el = int(input("Введите новый элемент рейтинга >>> "))

print("Итоговый рейтинг", rating)


6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. 
В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Пример готовой структуры:

[
    (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
    (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
    (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название, а значение — список значений-характеристик, 
например список названий товаров.

goods = []
while input("Хотите добавить товар? да/нет: ") == 'да':
    number = int(input("Введите номер продукта: "))
    features = {}
    feature_key = "Название"
    feature_value = input("Введите название продукта: ")
    features[feature_key] = feature_value
    goods.append(tuple([number, features]))
print(goods)

analitics = {}
for good in goods:
    for feature_key, feature_value in good[1].items():
        if feature_key in analitics:
            analitics[feature_key].append(feature_value)
        else:
         analitics[feature_key] = [feature_value]
print(analitics)
